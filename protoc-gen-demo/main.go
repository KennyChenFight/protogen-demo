package main

import (
	"flag"
	"fmt"
	"os"

	"google.golang.org/protobuf/compiler/protogen"
)

func main() {
	var flags flag.FlagSet
	fooValue := flags.String("foo", "default", "")

	protogen.Options{ParamFunc: flags.Set}.Run(func(gen *protogen.Plugin) error {
		fmt.Fprintln(os.Stderr, "fooValue:", *fooValue)
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			fmt.Fprintf(os.Stderr, "Fprintln: %v\n", "start generate file")
			generateFile(gen, f)
			fmt.Fprintf(os.Stderr, "Fprintln: %v\n", "end generate file")
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	fmt.Fprintln(os.Stderr, *gen.Request.Parameter)
	filename := file.GeneratedFilenamePrefix + "_demo.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-demo. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	for _, msg := range file.Messages {
		var existGreetingField bool
		for _, field := range msg.Fields {
			if field.GoName == "Greeting" {
				existGreetingField = true
				break
			}
		}
		if existGreetingField {
			g.P("func (x *", msg.GoIdent, ") SayHello() string {")
			g.P("return `", "Greeting!", "`")
			g.P("}")
		}
	}

	return g
}
